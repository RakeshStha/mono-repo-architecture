stages:
  - prepare
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""  # Disable TLS for docker:dind
  PROJECT_A_IMAGE: $CI_REGISTRY_IMAGE/project-a:$CI_COMMIT_SHA  # e.g., registry.gitlab.com/<your-username>/<repo-name>/project-a:<commit-sha>
  PROJECT_B_IMAGE: $CI_REGISTRY_IMAGE/project-b:$CI_COMMIT_SHA  # e.g., registry.gitlab.com/<your-username>/<repo-name>/project-b:<commit-sha>
  NGINX_IMAGE: $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_SHA          # e.g., registry.gitlab.com/<your-username>/<repo-name>/nginx:<commit-sha>

.default_job:
  image: node:20
  before_script:
    - npm install -g corepack  # Fix corepack: not found
    - corepack enable
    - corepack prepare pnpm@latest --activate
    - pnpm install
    - git fetch origin main

prepare_changes:
  stage: prepare
  extends: .default_job
  script:
    - echo "Checking changed projects..."
    - |
      CHANGED_FILES=$(git diff --name-only origin/main HEAD)
      echo "$CHANGED_FILES" > changed_files.txt
  artifacts:
    paths:
      - changed_files.txt

build_project_a:
  stage: build
  extends: .default_job
  needs: [prepare_changes]
  script:
    - |
      if grep -q "^apps/project-a/" changed_files.txt || grep -q "^packages/common/" changed_files.txt || grep -q "^apps/project-a/Dockerfile$" changed_files.txt; then
        echo "âœ… Building project-a image..."
        pnpm turbo run build --filter=project-a
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        docker build -f apps/project-a/Dockerfile -t $PROJECT_A_IMAGE .
        docker push $PROJECT_A_IMAGE
      else
        echo "ðŸŸ¢ No changes in project-a â€” skipping build"
      fi
  artifacts:
    paths:
      - apps/project-a/dist/

build_project_b:
  stage: build
  extends: .default_job
  needs: [prepare_changes]
  script:
    - |
      if grep -q "^apps/project-b/" changed_files.txt || grep -q "^packages/common/" changed_files.txt || grep -q "^apps/project-b/Dockerfile$" changed_files.txt; then
        echo "âœ… Building project-b image..."
        pnpm turbo run build --filter=project-b
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        docker build -f apps/project-b/Dockerfile -t $PROJECT_B_IMAGE .
        docker push $PROJECT_B_IMAGE
      else
        echo "ðŸŸ¢ No changes in project-b â€” skipping build"
      fi
  artifacts:
    paths:
      - apps/project-b/dist/

build_nginx:
  stage: build
  image: docker:24.0.2
  services:
    - docker:dind
  needs: [prepare_changes]
  script:
    - |
      if grep -q "^nginx/" changed_files.txt || grep -q "^nginx/Dockerfile$" changed_files.txt; then
        echo "âœ… Building nginx image..."
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        docker build -t $NGINX_IMAGE -f nginx/Dockerfile nginx
        docker push $NGINX_IMAGE
      else
        echo "ðŸŸ¢ No changes in nginx â€” skipping build"
      fi

deploy:
  stage: deploy
  image: alpine:latest
  needs: [build_project_a, build_project_b, build_nginx]
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - |
      DEPLOYED=false

      # Deploy project-a
      cat << 'PROJECT_A_EOF' > deploy_project_a.sh
      #!/bin/sh
      if grep -q "^apps/project-a/" changed_files.txt || grep -q "^packages/common/" changed_files.txt || grep -q "^apps/project-a/Dockerfile$" changed_files.txt; then
        echo "ðŸš€ Deploying project-a..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST sh -c "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && \
          docker pull $PROJECT_A_IMAGE && \
          docker network create app-network || true && \
          docker stop project-a || true && \
          docker rm project-a || true && \
          docker run -d --name project-a --network app-network -p 3001:80 $PROJECT_A_IMAGE"
        exit 0
      fi
      PROJECT_A_EOF
      sed -i 's/\r$//' deploy_project_a.sh
      chmod +x deploy_project_a.sh
      ./deploy_project_a.sh && DEPLOYED=true || true

      # Deploy project-b
      cat << 'PROJECT_B_EOF' > deploy_project_b.sh
      #!/bin/sh
      if grep -q "^apps/project-b/" changed_files.txt || grep -q "^packages/common/" changed_files.txt || grep -q "^apps/project-b/Dockerfile$" changed_files.txt; then
        echo "ðŸš€ Deploying project-b..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST sh -c "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && \
          docker pull $PROJECT_B_IMAGE && \
          docker network create app-network || true && \
          docker stop project-b || true && \
          docker rm project-b || true && \
          docker run -d --name project-b --network app-network -p 3002:80 $PROJECT_B_IMAGE"
        exit 0
      fi
      PROJECT_B_EOF
      sed -i 's/\r$//' deploy_project_b.sh
      chmod +x deploy_project_b.sh
      ./deploy_project_b.sh && DEPLOYED=true || true

      # Deploy nginx
      cat << 'NGINX_EOF' > deploy_nginx.sh
      #!/bin/sh
      if grep -q "^nginx/" changed_files.txt || grep -q "^nginx/Dockerfile$" changed_files.txt; then
        echo "ðŸš€ Deploying nginx..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST sh -c "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && \
          docker pull $NGINX_IMAGE && \
          docker network create app-network || true && \
          docker stop nginx || true && \
          docker rm nginx || true && \
          docker run -d --name nginx --network app-network -p 3000:80 $NGINX_IMAGE"
        exit 0
      fi
      NGINX_EOF
      sed -i 's/\r$//' deploy_nginx.sh
      chmod +x deploy_nginx.sh
      ./deploy_nginx.sh && DEPLOYED=true || true

      # Check if any deployment occurred
      if [ "$DEPLOYED" = "false" ]; then
        echo "ðŸŸ¢ No relevant changes â€” skipping deployment"
      fi
  only:
    - main